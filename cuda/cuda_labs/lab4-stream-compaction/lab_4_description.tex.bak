\documentclass[11.5pt]{article}
\usepackage{graphics, graphicx, cite, fancybox, setspace}
\usepackage{amsfonts, amssymb, amsmath, latexsym, epic, eepic, url}
\usepackage{algorithm}
\usepackage{algorithmic}
\usepackage[letterpaper, left=1in, right=1in, top=1in, bottom=1in]{geometry}
%\usepackage{setspace}
\begin{document}

%% Different font in captions
\newcommand{\captionfonts}{\bf}{\small}
\makeatletter  % Allow the use of @ in command names
\long\def\@makecaption#1#2{%
  \vskip\abovecaptionskip
  \sbox\@tempboxa{{\captionfonts #1: #2}}%
  \ifdim \wd\@tempboxa >\hsize
    {\captionfonts #1: #2\par}
  \else
    \hbox to\hsize{\hfil\box\@tempboxa\hfil}%
  \fi
  \vskip\belowcaptionskip}
\makeatother   % Cancel the effect of \makeatletter
\renewcommand{\figurename}{Fig.} %Make the caption read Fig.

\title{ECEC-413: Introduction to Parallel Computer Architecture \\ CUDA Programming Lab 4: Stream Compaction}
\author{Prof. Naga Kandasamy, ECE Department, Drexel University}
\maketitle %
\date{}

\noindent The Lab is due December 12, 2011. You may work on the assignment in teams of up to two people.
\vspace{12pt}

\noindent Edit the source files \texttt{compact\_stream.cu} and \texttt{compact\_stream\_kernel.cu} to complete the functionality of stream compaction on the GPU using prefix scan. Specifically, you are provided with an array (or stream) comprising both positive and negative numbers, and you are asked to filter out only positive values greater than zero and store these values in the compacted stream. A paper on how to implement prefix scan on the GPU is available at \url{http://http.developer.nvidia.com/GPUGems3/gpugems3_ch39.html}. The \texttt{compact\_stream\_kernel.cu} file contains an implementation of the scan algorithm detailed in Fig. 39.2.2 of the paper. Please use the kernel as a building block for stream compaction and add additional kernels as necessary. Section 39.3.1 of the paper discusses how to use prefix scan for
compacting a stream.

\begin{itemize}
\item First, assume a default stream size of 512 elements. Your program should accept no arguments. The
CPU implementation of the stream compaction algorithm will be used to generate a correct solution
which will be compared with your GPU program's output. If the solutions match within a certain
tolerance, if will print out ``Test PASSED'' to the screen before exiting.

\item Once you have the simpler version of the program working for a default stream size of 512 elements,
extend your design to work with larger streams. You may assume the number of elements in the stream
to be a multiple of 512.

\item E-mail me all of the files needed to compile and run your code as a single zip file. Also, attach a short
report detailing the design and implementation of your program.
\end{itemize}

Your assignment will be graded on the following parameters:
\begin{itemize}
\item Correct performance when the number of stream elements is limited to 512: 15 points.
\item Correct performance when the number of stream elements is greater than 512: 10 points.
\end{itemize}

\end{document}
